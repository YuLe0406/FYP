-- USER Table
CREATE TABLE USER (
    U_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_FName VARCHAR(255) NOT NULL,
    U_LName VARCHAR(255) NOT NULL,
    U_DOB DATE NOT NULL,
    U_Gender VARCHAR(6) NOT NULL,
    U_Email VARCHAR(255) NOT NULL UNIQUE,
    U_Password VARCHAR(255) NOT NULL,
    U_PNumber VARCHAR(11) NOT NULL,
    U_SecurityQuestion VARCHAR(255) NOT NULL,
    U_SecurityAnswer VARCHAR(255) NOT NULL,
    U_Status INT(1) DEFAULT 0  -- 1=blocked, 0=active
);

-- ADMIN Table
CREATE TABLE ADMIN (
    A_ID INT AUTO_INCREMENT PRIMARY KEY,
    A_Name VARCHAR(255) NOT NULL,
    A_Password VARCHAR(255) NOT NULL,
    A_Email VARCHAR(255) NOT NULL UNIQUE,
    A_CN VARCHAR(11) NOT NULL,
    A_Level INT(1) NOT NULL,  -- 1 for Superadmin, 0 for Admin
    A_Status INT(1) DEFAULT 0  -- 1 = blocked, 0 = active
);

-- CATEGORIES Table
CREATE TABLE CATEGORIES (
    C_ID INT AUTO_INCREMENT PRIMARY KEY,
    C_Name VARCHAR(255) NOT NULL
);

CREATE TABLE PRODUCT_COLOR (
    PC_ID INT AUTO_INCREMENT PRIMARY KEY,
    COLOR_NAME VARCHAR(50) NOT NULL,
    COLOR_HEX VARCHAR(7) NOT NULL,  -- Stores hex codes like #FF0000
    COLOR_IMAGE VARCHAR(255)       -- Optional path to color swatch image
);

-- PRODUCT Table
CREATE TABLE PRODUCT (
    P_ID INT AUTO_INCREMENT PRIMARY KEY,
    C_ID INT NOT NULL,
    P_Name VARCHAR(255) NOT NULL,
    P_Price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (C_ID) REFERENCES CATEGORIES(C_ID)
);

CREATE TABLE PRODUCT_IMAGES (
    PI_ID INT AUTO_INCREMENT PRIMARY KEY,
    P_ID INT NOT NULL,
    PRODUCT_IMAGE VARCHAR(255) NOT NULL,
    FOREIGN KEY (P_ID) REFERENCES PRODUCT(P_ID) ON DELETE CASCADE
);

-- Simplified PRODUCT_VARIANTS (without color table)
CREATE TABLE PRODUCT_VARIANTS (
    PV_ID INT AUTO_INCREMENT PRIMARY KEY,
    P_ID INT NOT NULL,
    PC_ID INT NOT NULL,
    P_Size VARCHAR(255) NOT NULL,
    P_Quantity INT NOT NULL,
    FOREIGN KEY (PC_ID) REFERENCES PRODUCT_COLOR(PC_ID) ON DELETE CASCADE,
    FOREIGN KEY (P_ID) REFERENCES PRODUCT(P_ID) ON DELETE CASCADE
);

-- ADDRESS Table
CREATE TABLE ADDRESS (
    AD_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_ID INT NOT NULL,
    AD_Details TEXT NOT NULL,
    AD_City VARCHAR(255) NOT NULL,
    AD_State VARCHAR(255) NOT NULL,
    AD_ZipCode VARCHAR(10) NOT NULL,
    FOREIGN KEY (U_ID) REFERENCES USER(U_ID) ON DELETE CASCADE
);

-- Simplified WISHLIST
CREATE TABLE WISHLIST (
    W_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_ID INT NOT NULL,
    P_ID INT NOT NULL,
    W_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (U_ID) REFERENCES USER(U_ID) ON DELETE CASCADE,
    FOREIGN KEY (P_ID) REFERENCES PRODUCT(P_ID) ON DELETE CASCADE,
    UNIQUE (U_ID, P_ID)
);

-- CART Table
CREATE TABLE CART (
    CART_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_ID INT NOT NULL,
    P_ID INT NOT NULL,
    CART_Quantity INT NOT NULL,
    FOREIGN KEY (U_ID) REFERENCES USER(U_ID) ON DELETE CASCADE,
    FOREIGN KEY (P_ID) REFERENCES PRODUCT(P_ID) ON DELETE CASCADE
);

CREATE TABLE ORDER_STATUS (
    OS_ID INT AUTO_INCREMENT PRIMARY KEY,
    O_Status VARCHAR(255) NOT NULL
);

CREATE TABLE ORDERS (
    O_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_ID INT NOT NULL,
    AD_ID INT NOT NULL,
    OS_ID INT NOT NULL,  -- This was missing in your original schema
    O_Date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    O_TotalAmount DECIMAL(10,2) NOT NULL,
    O_DC DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (U_ID) REFERENCES USER(U_ID) ON DELETE CASCADE,
    FOREIGN KEY (AD_ID) REFERENCES ADDRESS(AD_ID),
    FOREIGN KEY (OS_ID) REFERENCES ORDER_STATUS(OS_ID)
);

-- ORDER_ITEMS Table
CREATE TABLE ORDER_ITEMS (
    OI_ID INT AUTO_INCREMENT PRIMARY KEY,
    O_ID INT NOT NULL,
    P_ID INT NOT NULL,
    PV_ID INT NULL,
    OI_Quantity INT NOT NULL,
    OI_Price DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (O_ID) REFERENCES ORDERS(O_ID) ON DELETE CASCADE,
    FOREIGN KEY (P_ID) REFERENCES PRODUCT(P_ID),
    FOREIGN KEY (PV_ID) REFERENCES PRODUCT_VARIANTS(PV_ID) ON DELETE SET NULL
);

CREATE TABLE PAYMENT (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    O_ID INT NOT NULL,
    payment_date DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(255) NOT NULL,
    amount DECIMAL(10,2) NOT NULL CHECK (amount > 0),
    payment_status VARCHAR(255) NOT NULL DEFAULT 'Pending',
    transaction_id VARCHAR(255) UNIQUE,
    payment_details JSON,
    FOREIGN KEY (O_ID) REFERENCES ORDERS(O_ID) ON DELETE CASCADE
);

CREATE TABLE DELIVERY_STATUS (
    DS_ID INT AUTO_INCREMENT PRIMARY KEY,
    D_Status VARCHAR(255) NOT NULL
);

CREATE TABLE DELIVERY (
    D_ID INT AUTO_INCREMENT PRIMARY KEY,
    O_ID INT NOT NULL,
    D_Carrier VARCHAR(100) NOT NULL,          -- e.g., "FedEx", "DHL"
    D_TrackingNumber VARCHAR(255),            -- Carrier's tracking ID
    D_StartDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    D_EstimatedDelivery DATE NOT NULL,        -- Expected delivery date
    D_ActualDelivery DATETIME NULL,           -- When actually delivered
    DS_ID INT NOT NULL,
    FOREIGN KEY (DS_ID) REFERENCES DELIVERY_STATUS(DS_ID),
    FOREIGN KEY (O_ID) REFERENCES ORDERS(O_ID) ON DELETE CASCADE
);

-- Simplified BANNER
CREATE TABLE BANNER (
    B_ID INT AUTO_INCREMENT PRIMARY KEY,
    B_Text TEXT NOT NULL,
    B_Picture VARCHAR(255) NOT NULL,
    B_Status INT(1) DEFAULT 1  -- 1=active, 0=inactive
);

CREATE TABLE BANNER_PICTURE (
    BP_ID INT AUTO_INCREMENT PRIMARY KEY,
    B_ID INT NOT NULL,
    B_Picture VARCHAR(255) NOT NULL,
    BP_Status INT(1) DEFAULT 1,  -- 1=active, 0=inactive
    FOREIGN KEY (B_ID) REFERENCES BANNER(B_ID) ON DELETE CASCADE
);

CREATE TABLE VOUCHER (
    V_ID INT AUTO_INCREMENT PRIMARY KEY,
    V_Code VARCHAR(50) NOT NULL UNIQUE,
    V_Discount DECIMAL(5,2) NOT NULL CHECK (V_Discount > 0 AND V_Discount <= 100),
    V_ExpiryDate DATE NOT NULL,
    V_UsageLimit INT NOT NULL DEFAULT 1,
    V_UsedCount INT DEFAULT 0,
    V_Status INT(1) DEFAULT 1  -- 1=active, 0=inactive
);

-- Junction table for voucher usage tracking
CREATE TABLE ORDER_VOUCHER (
    OV_ID INT AUTO_INCREMENT PRIMARY KEY,
    O_ID INT NOT NULL,
    V_ID INT NOT NULL,
    FOREIGN KEY (O_ID) REFERENCES ORDERS(O_ID),
    FOREIGN KEY (V_ID) REFERENCES VOUCHER(V_ID)
);

CREATE TABLE FEEDBACK (
    F_ID INT AUTO_INCREMENT PRIMARY KEY,
    U_ID INT NOT NULL,
    F_Type VARCHAR(100) NOT NULL,
    F_Description TEXT NOT NULL,
    FOREIGN KEY (U_ID) REFERENCES USER(U_ID)
);

CREATE TABLE REPLY_FEEDBACK (
    RF_ID INT AUTO_INCREMENT PRIMARY KEY,
    A_ID INT NOT NULL,
    F_ID INT NOT NULL,
    RF_Reply TEXT NOT NULL,
    FOREIGN KEY (A_ID) REFERENCES ADMIN(A_ID),
    FOREIGN KEY (F_ID) REFERENCES FEEDBACK(F_ID)
);